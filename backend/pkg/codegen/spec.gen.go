// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9sC27HKpIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
